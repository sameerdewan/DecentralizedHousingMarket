
// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const Verifier = artifacts.require('Verifier');
const json = require('../../zokrates/code/square/proof.json');

// - use the contents from proof.json generated from zokrates steps
contract('Verifier Tests', accounts => {
    const account_one = accounts[0];
    const A = json.proof.a;
    const B = json.proof.b;
    const C = json.proof.c;
    const inputs = json.inputs;
    const fakeInputs = [
        '0x0000000000000000000000000000000000000000000000000000000000000007', 
        '0x0000000000000000000000000000000000000000000000000000000000000009'
    ];
    let verifier;
    describe('Tests for incorrect and correct proofs', () => {
        before(async () => {
            verifier = await Verifier.new({ from: account_one });
        });
        // Test verification with correct proof
        it('Handles a correct proof', async () => {
            const verified = await verifier.verifyTx.call(A, B, C, inputs);
            assert.equal(verified, true, 'Error: A real proof was declined');
        });

        // Test verification with incorrect proof
        it('Handles an incorrect proof', async () => {
            const verified = await verifier.verifyTx.call(A, B, C, fakeInputs);
            assert.equal(verified, false, 'Error: A fake proof was verified');
        });

    });
});
